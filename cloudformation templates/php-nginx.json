{
  "Parameters": {
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "WebServerPort": {
      "Description": "The TCP port for the Web Server",
      "Type": "Number",
      "Default": "80"
    },
    "KeyPair": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "String",
      "Default" : "None"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "ZoneApex": {
      "Description": "Root Domain Name",
      "Type": "String"
    },
    "SubDomain": {
      "Description": "SubDomain of Stack",
      "Type": "String"
    },
    "PrivateRepo": {
      "Description": "Github repository",
      "Type": "String"
    },
    "PublicRepo": {
      "Description": "Github repository",
      "Type": "String"
    },
    "Branch": {
      "Description": "Github Branch",
      "Type": "String"
    },
    "Environment": {
      "Description": "Environment",
      "Type": "String"
    },
    "PublicSubnetBlocks": {
    "Description": "Public CIDR blocks",
    "Type": "CommaDelimitedList",
      "Default": "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24"
  },
    "PrivateSubnetBlocks": {
    "Description": "API CIDR blocks",
    "Type": "CommaDelimitedList",
      "Default": "10.0.40.0/24, 10.0.41.0/24, 10.0.42.0/24"
  },
    "DBsubnetBlocks": {
    "Description": "DB CIDR blocks",
    "Type": "CommaDelimitedList",
      "Default": "10.0.45.0/24, 10.0.46.0/24, 10.0.47.0/24"
  }
},
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "64" },
      "t2.medium"   : { "Arch" : "64" },
      "m3.medium"   : { "Arch" : "64" },
      "m3.large"    : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "64" : "ami-b66ed3de" },
      "us-west-2"      : { "64" : "ami-b5a7ea85" }
    },
    "NatAMI" : {
	    "us-east-1" : { "64" : "ami-184dc970"}, 
       "us-west-2" : {"64" : "ami-290f4119"}
  	}
  },
  "Conditions" : {
	"NoKeyPair" : {"Fn::Equals" : [{"Ref" : "KeyPair"},"None"]}  
	},
  "Resources": {
    "elbR53Record": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "ZoneApex"
              },
              "."
            ]
          ]
        },
        "Comment": "Zone apex alias targeted to myELB LoadBalancer.",
        "RecordSets": [
          {
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "SubDomain"
                  },
                  ".",
                  {
                    "Ref": "ZoneApex"
                  }
                ]
              ]
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "PublicELB",
                  "CanonicalHostedZoneNameID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "PublicELB",
                  "CanonicalHostedZoneName"
                ]
              }
            }
          }
        ]
      }
    },
    "envVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "PrivateSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "1", {"Ref": "PrivateSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {
          "Ref": "envVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "Environment"
                  },
                  "Subnet B"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "2", {"Ref": "PrivateSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {
          "Ref": "envVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "Environment"
                  },
                  "Subnet C"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "0", {"Ref": "PrivateSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {
          "Ref": "envVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "Environment"
                  },
                  "Subnet A"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "0", {"Ref": "PublicSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {"Ref": "envVPC"},
        "Tags": [
          {"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "Environment"}, "Public Subnet A"]]}}
		  ]
      }
    },
    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "1", {"Ref": "PublicSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {"Ref": "envVPC"},
        "Tags": [
          {"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "Environment"}, "Public Subnet B"]]}}
		  ]
      }
    },
    "PublicSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": { "Fn::Select" : [ "2", {"Ref": "PublicSubnetBlocks"} ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
        "VpcId": {"Ref": "envVPC"},
        "Tags": [
          {"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "Environment"}, "Public Subnet C"]]}}
		  ]
      }
    },
    "defaultIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "Environment"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      }
    },
    "dopta01bb1c9": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "PrivateACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        }
      }
    },
    "PublicACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        }
      }
    },
    "NatIP" : {
   	  "Type" : "AWS::EC2::EIP",
   	  "Properties" : {"InstanceId" : { "Ref" : "NAT4Private"}}
    },  
    "NAT4Private" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
	    "InstanceType" : {"Ref" : "InstanceType"},
        "ImageId": { "Fn::FindInMap" : [ "NatAMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch"]}]},
		"SecurityGroupIds" : [{"Ref" : "sgOpen"}],
		"SourceDestCheck" : false,
		"SubnetId" : {"Ref":"PublicSubnetA"},
		"KeyName" : {
      "Fn::If" : [
      	"NoKeyPair",
        {"Ref" : "AWS::NoValue"},
        {"Ref" : "KeyPair"}
      ]
    },
		"Tags" : [{"Key" : "Name", "Value":  {"Fn::Join": ["",[{"Ref": "PrivateRepo"},"-",{"Ref": "Environment"}, "-NAT"]]}}
		] 
    }},
    "PrivateELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PrivateSubnetA"
          },
          {
            "Ref": "PrivateSubnetB"
          },
          {
            "Ref": "PrivateSubnetC"
          }
        ],
        "CrossZone" : true,
        "Scheme" : "internal",
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "HTTP:80/phptest.php",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "sgLocal"
          },
          {
            "Ref": "sgWebFirewall"
          },
          {
            "Ref": "sgUpdateMaintenance"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "SSL"
          },
          {
            "InstancePort": "1666",
            "LoadBalancerPort": "1666",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
          }
        ]
      }
    },
    "PublicELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "defaultIGW",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnetA"
          },
          {
            "Ref": "PublicSubnetB"
          },
          {
            "Ref": "PublicSubnetC"
          }
        ],
        "CrossZone" : true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "10",
          "Target": "TCP:80",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "sgWebFirewall"
          },
          {
            "Ref": "sgUpdateMaintenance"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          },
          {
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "SSL"
          },
          {
            "InstancePort": "1666",
            "LoadBalancerPort": "1666",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP"
          }
        ]
      }
    },
    "apiASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
	  	"ResourceSignal": {
	  	"Count": "1",
	  	"Timeout": "PT10M"
    	}
  	  },
      "Properties": {
        "AvailabilityZones": [{"Fn::GetAtt" : [ "PrivateSubnetA", "AvailabilityZone"]},{"Fn::GetAtt" : [ "PrivateSubnetB", "AvailabilityZone"]},{"Fn::GetAtt" : [ "PrivateSubnetC", "AvailabilityZone"]}],
        "VPCZoneIdentifier": [{"Ref" : "PrivateSubnetA"}, {"Ref" : "PrivateSubnetB"}, {"Ref" : "PrivateSubnetC"}],
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "MaxSize": "15",
        "MinSize": "1",
        "HealthCheckGracePeriod": "180",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "PrivateLC"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PrivateELB"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PrivateRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "branch",
            "Value": {"Ref": "Branch"},
            "PropagateAtLaunch": true
          },
          {
            "Key": "environment",
            "Value": {"Ref": "Environment"},
            "PropagateAtLaunch": true
            },
            {
            "Key": "elb_url",
            "Value": {"Fn::GetAtt": ["PrivateELB","DNSName"]},
            "PropagateAtLaunch": true
          },
          {
            "Key": "maintenance-group",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PrivateRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "maintenance-queue",
            "Value": { "Fn::GetAtt" : ["maintenanceQueue", "QueueName"] },
            "PropagateAtLaunch": true
          },
          {
            "Key": "layer",
            "Value": {
              "Ref": "PrivateRepo"
            },
            "PropagateAtLaunch" : true
            },
          {
            "Key": "repo",
            "Value": {
              "Ref": "PrivateRepo"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "version",
            "Value": "1.0",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "PublicASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "apiASG",
	  "CreationPolicy": {
	  	"ResourceSignal": {
	  	"Count": "1",
	  	"Timeout": "PT10M"
    	}
  	  },
  	  "UpdatePolicy" : {
      	"AutoScalingScheduledAction" : {
        	 "IgnoreUnmodifiedGroupSizeProperties" : "true"
      	},
	  	"AutoScalingRollingUpdate" : {
        	 "MinInstancesInService" : "1",
			 "MaxBatchSize" : "1",
			 "WaitOnResourceSignals" : "true",
			 "PauseTime" : "PT5M"
      	}
   	  },
      "Properties": {
        "AvailabilityZones": [{"Fn::GetAtt" : [ "PublicSubnetA", "AvailabilityZone"]},{"Fn::GetAtt" : [ "PublicSubnetB", "AvailabilityZone"]},{"Fn::GetAtt" : [ "PublicSubnetC", "AvailabilityZone"]}],
        "VPCZoneIdentifier": [{"Ref" : "PublicSubnetA"}, {"Ref" : "PublicSubnetB"}, {"Ref" : "PublicSubnetC"}],
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "MaxSize": "15",
        "MinSize": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "PublicLC"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PublicELB"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PublicRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "branch",
            "Value": {
              "Ref": "Branch"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "maintenance-group",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PublicRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "maintenance-queue",
            "Value": { "Fn::GetAtt" : ["maintenanceQueue", "QueueName"] },
            "PropagateAtLaunch": true
          },
          {
            "Key": "repo",
            "Value": {
              "Ref": "PublicRepo"
            },
            "PropagateAtLaunch": true
          },{
            "Key": "layer",
            "Value": {
              "Ref": "PublicRepo"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "version",
            "Value": "1.0",
            "PropagateAtLaunch": true
          },
            {
            "Key": "elb_url",
            "Value": {"Fn::GetAtt": ["PublicELB","DNSName"]},
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "configTable1": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "",
            [ {"Ref" : "AWS::StackName"},"-",
              {
                "Ref": "PrivateRepo"
              },
              "-",
              "config"
            ]
          ]
        },
        "KeySchema": {
          "HashKeyElement": {
            "AttributeName": "env",
            "AttributeType": "S"
          },
          "RangeKeyElement": {
            "AttributeName": "option",
            "AttributeType": "S"
          }
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        }
      }
    },
    "configTable2": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "",
            [ {"Ref" : "AWS::StackName"},"-",
              {
                "Ref": "PublicRepo"
              },
              "-",
              "config"
            ]
          ]
        },
        "KeySchema": {
          "HashKeyElement": {
            "AttributeName": "env",
            "AttributeType": "S"
          },
          "RangeKeyElement": {
            "AttributeName": "option",
            "AttributeType": "S"
          }
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        }
      }
    },
    "s3globalconfig": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "s3repostaging": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "maintenanceQueue1": {
      "Type": "AWS::SQS::Queue",
      "Properties" : {
        "VisibilityTimeout": "0",
		"ReceiveMessageWaitTimeSeconds" : 20,
		"QueueName" : {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PrivateRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  },
                  "-",
                  "maint"
                ]
              ]
            }}
    },
    "maintenanceQueue2": {
      "Type": "AWS::SQS::Queue",
      "Properties" : {
        "VisibilityTimeout": "0",
        "ReceiveMessageWaitTimeSeconds" : 20,
		"QueueName" : {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "PublicRepo"
                  },
                  "-",
                  {
                    "Ref": "Environment"
                  },
                  "-",
                  "maint"
                ]
              ]
            }}
    },
    "PrivateLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
      	"InstanceType" : {"Ref" : "InstanceType"},
        "ImageId": { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "KeyName": {
      "Fn::If" : ["NoKeyPair",
        {"Ref" : "AWS::NoValue"},
        {"Ref" : "KeyPair"}
      ]
    },
        "IamInstanceProfile": {
          "Ref": "ec2InstanceProfile1"
        },
        "SecurityGroups": [
          {
            "Ref": "sgLocal"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
			"#cloud-config\n",
			"repo_update: true\n",
			"repo_upgrade: all\n",
			"runcmd:\n",
            " - /opt/aws/bin/cfn-init -v ",
            "-s ", { "Ref" : "AWS::StackName" },
            " --resource 'PrivateLC' ",
            "-c 'NginxPHP' ",
            "--region ", { "Ref" : "AWS::Region" }, "\n",
			"\n",
			" - usermod -a -G www ec2-user\n",
			" - usermod -a -G www apache\n",
			" - chown -R root:www /var/www/html\n",
			" - chmod 2775 /var/www/html\n",
            " - /opt/aws/bin/cfn-signal -e $? ",
            "--stack ", { "Ref" : "AWS::StackName" },
            " --resource apiASG ",
            "--region ", { "Ref" : "AWS::Region" }, "\n",
			"output : { all : '| tee -a /var/log/cloud-init-output.log' }\n"
			]]}
		}
      },
      "Metadata" : {
	      "AWS::CloudFormation::Init" :{
		    "configSets" : {
			    "NginxPHP" : ["InstallNginxPHP", "Configure"]
		    },
		    "InstallNginxPHP" : {
			    "packages" : {
					  "yum" : {
						"jq" : [],
						"nginx" : [],
						"crypto-utils" : [],
						"git" : [],
						"php55-fpm" : [],
						"php55-mysqlnd" : []
					},
					  "python" : {
  						"pip" : [],
  						"GitPython" : [],
  						"flask" : [],
  						"gunicorn" : [],
  						"supervisor" : []
					    
					  }
				  },
				"files" : {
					"/temp/test.txt" : {
						"content" : {"Fn::Join" : ["", ["aws dynamodb put-item --table-name endpoints --item '{\"env\": {\"S\": ", {"Ref" : "Environment"}, "},\"layer\": {\"S\": ", {"Ref" : "Environment"} ,"},\"url\": {\"S\": ", {"Fn::GetAtt": ["PublicELB","DNSName"]} ,"}}' --region ", {"Ref" : "AWS::Region"}]]}
					}
				},
				"commands" : { 
					"0SetUpDirectories" : { 
						"command" : "mkdir -p /var/www/html",
						"command" : "mkdir /etc/config"
					}
					},
				  "sources" : {
					"/etc/skynet" : "https://github.com/msirull/skynet/archive/master.zip"
				}
		    },
			  "Configure" : {
			  	"files" : {
				  	"/etc/boto.cfg" : {
						  "content" : {"Fn::Join" : ["", [
						  	"[DynamoDB]\n",
							  "region = ", {"Ref" : "AWS::Region"}, ""
						  	]]}
					},
					  "/var/www/html/phptest.php" : {
						"content" : "<?php phpinfo(); ?>"
					},
					"/etc/config/php-default.nginx" : {
						"content" : { "Fn::Join" : [ "", [
							"server { \n",
							"listen       80 default_server; \n",
							"server_name  _; \n",
							"root         /var/www/html; \n",
							"error_log /var/log/nginx/error.log error; \n",
							"\n",
							"location / {} \n",
							"location ~ \\.php$ { \n",
							"root           /var/www/html; \n",
							"fastcgi_pass   127.0.0.1:9000; \n",
							"fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name; \n",
							"fastcgi_param  ENVIRONMENT production; \n",
							"include        fastcgi_params; \n",
							"} \n",
							"} \n"
							]]},
							"owner" : "nginx",
							"group" : "nginx"
					}
				},
				"groups" : {
					"www" : {}
				},
				"commands" : {
					"BSetUpSkynet" : {
						"command" : "/etc/skynet/skynet-master/setup.sh"
					},
					"ASetPermissions" : {
							"command" : "chmod 755 /etc/skynet/skynet-master/setup.sh"
					}
				},
				"services" : {
					"sysvinit" : {
						"nginx" : {
							"enabled" : "true",
							"ensureRunning" : "true",
							"files" : ["/etc/nginx/nginx.conf", "/etc/config/rp.locations", "/etc/config/rp.nginx"],
							"sources" : ["/var/www/html"]
						},
						"supervisord" : {
							"enabled" : "true",
							"ensureRunning" : "true"
						},
						"php-fpm-5.5" : {
							"enabled" : "true",
							"ensureRunning" : "true",
							"files" : ["/etc/config/php.ini"]
						}
					}
				}
			}
		}
  }
    },
    "PublicLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
      	"AssociatePublicIpAddress" : true,
      	"InstanceType" : {"Ref" : "InstanceType"},
        "ImageId": { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "KeyName": {
      "Fn::If" : [
        "NoKeyPair",
        {"Ref" : "AWS::NoValue"},
        {"Ref" : "KeyPair"}
      ]
    },
        "IamInstanceProfile": {
          "Ref": "ec2InstanceProfile2"
        },
        "SecurityGroups": [
            {"Ref": "sgTrusted"},
            {"Ref": "sgELB"},
            {"Ref": "sgUpdateMaintenance"}
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
			"#cloud-config\n",
			"repo_update: true\n",
			"repo_upgrade: all\n",
			"runcmd:\n",
            " - /opt/aws/bin/cfn-init -v ",
            "-s ", { "Ref" : "AWS::StackName" },
            " --resource 'PublicLC' ",
            "-c 'NginxEdge' ",
            "--region ", { "Ref" : "AWS::Region" }, "\n",
			"\n",
			" - usermod -a -G www ec2-user\n",
			" - usermod -a -G www apache\n",
			" - chown -R root:www /var/www/html\n",
			" - chmod 2775 /var/www/html\n",
            " - /opt/aws/bin/cfn-signal -e $? ",
            "--stack ", { "Ref" : "AWS::StackName" },
            " --resource PublicASG ",
            "--region ", { "Ref" : "AWS::Region" }, "\n",
			"output : { all : '| tee -a /var/log/cloud-init-output.log' }\n"
			]]}
		}
	},
      "Metadata" : {
	      "AWS::CloudFormation::Init" :{
		    "configSets" : {
			    "NginxEdge" : ["InstallNginxOnly", "ConfigureEdge"]
		    },
		    "InstallNginxOnly" : {
			    "packages" : {
					"yum" : {
						"jq" : [],
						"nginx" : [],
						"crypto-utils" : [],
						"git" : []
					},
					"python" : {
						"pip" : [],
						"GitPython" : [],
						"flask" : [],
						"gunicorn" : [],
						"supervisor" : []
					}	
				},
				"files" : {
					"/temp/test.txt" : {
						"content" : {"Fn::Join" : ["", ["aws dynamodb put-item --table-name endpoints --item '{\"env\": {\"S\": ", {"Ref" : "Environment"}, "},\"layer\": {\"S\": ", {"Ref" : "Environment"} ,"},\"url\": {\"S\": ", {"Fn::GetAtt": ["PublicELB","DNSName"]} ,"}}' --region ", {"Ref" : "AWS::Region"}]]}
					}
				},
				"commands" : { 
					"0SetUpDirectories" : { 
						"command" : "mkdir -p /var/www/html",
						"command" : "mkdir /etc/config"
					}
					},				
				"sources" : {
					"/etc/skynet" : "https://github.com/msirull/skynet/archive/master.zip"
				}
		    },
			"ConfigureEdge" : {
				"files" : {
					"/etc/boto.cfg" : {
						"content" : {"Fn::Join" : ["", [
							"[DynamoDB]\n",
							"region = ", {"Ref" : "AWS::Region"}, ""
							]]
						}
					},
					"/var/www/html/test.html" : {
						"content" : "It Works!"
					},
					"/etc/config/rp.nginx" : {
						"content" : { "Fn::Join" : [ "", [
							"server { \n",
							"listen       80 default_server; \n",
							"server_name  _; \n",
							"root         /var/www/html; \n",
							"\n",
							"include /etc/config/rp.locations;",
							"} \n"
							]]},
							"owner" : "nginx",
							"group" : "nginx"
					}
				},
				"groups" : {
					"www" : {}
				},
				"commands" : {
					"BSetUpSkynet" : {
						"command" : "/etc/skynet/skynet-master/setup.sh"
					},
					"ASetPermissions" : {
							"command" : "chmod 755 /etc/skynet/skynet-master/setup.sh"
					},
					"CReverseProxyLocations" : {
						"command" : "python /etc/skynet/skynet-master/scripts/rp_config.py"

					}
				},
				"services" : {
					"sysvinit" : {
						"nginx" : {
							"enabled" : "true",
							"ensureRunning" : "true",
							"files" : ["/etc/nginx/nginx.conf", "/etc/config/rp.locations", "/etc/config/rp.nginx"],
							"sources" : ["/var/www/html"]
						},
						"supervisord" : {
							"enabled" : "true",
							"ensureRunning" : "true"
						}
					}
				}
			}
		}
      }
    },
    "sgTrusted": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Trusted Locations",
        "VpcId": {
          "Ref": "envVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "72.194.81.45/32"
          }
        ]
      }
    },
    "sgLocal": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "VPC Access",
        "VpcId": {
          "Ref": "envVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "10.0.0.0/16"
          }
        ]
      }
    },
    "sgOpen": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Wide Open",
        "VpcId": {
          "Ref": "envVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "sgWebFirewall": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Web/Firewall Ports",
        "VpcId": {
          "Ref": "envVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "sgELB": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Public ELB",
        "VpcId": {
          "Ref": "envVPC"
		 },
        "SecurityGroupIngress": {
			    "SourceSecurityGroupId": {"Ref" : "sgWebFirewall"},
			    "FromPort": "80",
			    "IpProtocol": "tcp",
			    "ToPort": "80"
        }
		}
	},
    "sgUpdateMaintenance": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow inbound maintenance notifications",
        "VpcId": {
          "Ref": "envVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "1666",
            "ToPort": "1666",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "666",
            "ToPort": "666",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1666",
            "ToPort": "1666",
            "SourceSecurityGroupId": {"Ref" : "sgWebFirewall"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "666",
            "ToPort": "666",
            "SourceSecurityGroupId": {"Ref" : "sgWebFirewall"}
          }
        ]
      }
    },
    "scalingDecreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "Cooldown": "360",
        "ScalingAdjustment": "-25",
        "AutoScalingGroupName": {
          "Ref": "apiASG"
        }
      }
    },
    "scalingIncreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "Cooldown": "180",
        "ScalingAdjustment": "50",
        "AutoScalingGroupName": {
          "Ref": "apiASG"
        }
      }
    },
    "alarmHighCPUUtilization": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "3",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Maximum",
        "Threshold": "80.0",
        "AlarmActions": [
          {
            "Ref": "scalingIncreaseGroupSize"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {"Ref" : "apiASG"}
          }
        ]
      }
    },
    "alarmLowCPUUtilization": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "EvaluationPeriods": "10",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Minimum",
        "Threshold": "20.0",
        "AlarmActions": [
          {
            "Ref": "scalingDecreaseGroupSize"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {"Ref" : "apiASG"}
          }
        ]
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PrivateACL"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PrivateACL"
        }
      }
    },
    "PublicAcl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PublicACL"
        }
      }
    },
    "PublicAcl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PublicACL"
        }
      }
    },
    "PrivateSubnetAclA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        }
      }
    },
    "PrivateSubnetAclB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        }
      }
    },
    "PrivateSubnetAclC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateACL"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetC"
        }
      }
    },
    "PublicSubnetAclAssociationA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicACL"
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "PublicSubnetAclAssociationB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicACL"
        },
        "SubnetId": {
          "Ref": "PublicSubnetB"
        }
      }
    },
    "PublicSubnetAclAssociationC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicACL"
        },
        "SubnetId": {
          "Ref": "PublicSubnetC"
        }
      }
    },
    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        },
        "InternetGatewayId": {
          "Ref": "defaultIGW"
        }
      }
    },
    "PrivateSubnetRoute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        }
      }
    },
    "PrivateSubnetRoute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        }
      }
    },
    "PrivateSubnetRoute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetC"
        }
      }
    },
    "PublicSubnetRoute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "PublicSubnetRoute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetB"
        }
      }
    },
    "PublicSubnetRoute3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetC"
        }
      }
    },
    "RouteDirectOut": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "defaultIGW"
        }
      },
      "DependsOn": "gw1"
    },
    "Route2NAT": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "InstanceId": {
          "Ref": "NAT4Private"
        }
      }
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "envVPC"
        },
        "DhcpOptionsId": {
          "Ref": "dopta01bb1c9"
        }
      }
    },
    "ingress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgTrusted"
        },
        "IpProtocol": "-1",
        "CidrIp": "72.194.81.45/32"
      }
    },
    "ingress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgLocal"
        },
        "IpProtocol": "-1",
        "CidrIp": "10.0.0.0/16"
      }
    },
    "ingress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgWebFirewall"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgWebFirewall"
        },
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress5": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgUpdateMaintenance"
        },
        "IpProtocol": "tcp",
        "FromPort": "1666",
        "ToPort": "1666",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress6": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgUpdateMaintenance"
        },
        "IpProtocol": "tcp",
        "FromPort": "666",
        "ToPort": "666",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "GlobalConfigPolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName": "global-config-bucket-access",
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    { "Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3globalconfig"}, "/global/*"]]}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Condition": {
                    "StringLike": {
                      "s3:prefix": "global/*"
                    }
                  },
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "s3globalconfig"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            },
        "Roles" : [{"Ref" : "ec2Role1"}, {"Ref" : "ec2Role2"}]
      }
    },
    "EnvironmentConfigPolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName": {"Fn::Join": ["", [ {"Ref" : "Environment"}, "-config"]]},
        "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [{"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}, "/environments/", {"Ref" : "Environment"}, "/database/*"]]},
                    {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}, "/environments/", {"Ref" : "Environment"}, "/web-server/*"]]}]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Condition": {
                    "StringLike": {
                      "s3:prefix" : { 
                        "Fn::Join": [ "", ["environments/", {"Ref" : "Environment"}, "/database/*"]]}
                    }
                  },
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "s3globalconfig"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Condition": {
                    "StringLike": {
                      "s3:prefix": 
                      { "Fn::Join": [ "", ["environments/", {"Ref" : "Environment"}, "/web-server/*"]]}
                    }
                  },
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "s3globalconfig"
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            },
        "Roles" : [{"Ref" : "ec2Role1"}, {"Ref" : "ec2Role2"}]
      }
    },
    "DynamoConfigPolicy1":    {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
          "PolicyName": "get-config-from-dynamodb",
          "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query"
                  ],
                  "Condition": {
                    "ForAllValues:StringEquals": {
                      "dynamodb:LeadingKeys": [{"Ref" : "Environment"}]
                    }
                  },
                  "Resource": [
                { "Fn::Join": [ "", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"} , ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "PrivateRepo"}, "-config/"]]}
                 ]
                }
              ]
            },
          "Roles" : [{"Ref" : "ec2Role1"}]
      }
    },
    "DynamoConfigPolicy2":    {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
          "PolicyName": "get-config-from-dynamodb",
          "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query"
                  ],
                  "Condition": {
                    "ForAllValues:StringEquals": {
                      "dynamodb:LeadingKeys": [{"Ref" : "Environment"}]
                    }
                  },
                  "Resource": [
                { "Fn::Join": [ "", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"} , ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "PublicRepo"}, "-config/"]]}
                 ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query"
                  ],
                  "Condition": {
                    "ForAllValues:StringEquals": {
                      "dynamodb:LeadingKeys": [{"Ref" : "Environment"}]
                    }
                  },
                  "Resource": [
                { "Fn::Join": [ "", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"} , ":", {"Ref": "AWS::AccountId"}, ":table/endpoints"]]}

                 ]
                }
              ]
            },
          "Roles" : [{"Ref" : "ec2Role2"}]
      }
      },
    "ServiceRegistration": {
		  "Type" : "AWS::IAM::Policy",
		  "Properties" : {
			  "PolicyName": "service-registration",
			  "PolicyDocument": {
				"Statement": [
				    {
				      "Effect": "Allow",
				      "Action": [
				        "dynamodb:PutItem"
				      ],
				      "Condition": {
				        "ForAllValues:StringEquals": {
                      "dynamodb:LeadingKeys": [{"Ref" : "Environment"}]
				        }
				      },
				      "Resource": [
					  	{ "Fn::Join": [ "", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"} , ":", {"Ref": "AWS::AccountId"}, ":table/endpoints"]]}
				      ]
				    }
				  ]

			},
        "Roles" : [{"Ref" : "ec2Role1"}, {"Ref" : "ec2Role2"}]
		  }
    },
    "IAMInfoPolicy2" :  {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
	       "PolicyName" : "iam-info",
	        "PolicyDocument" :{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListRolePolicies"
      ],
      "Resource": [
	      { "Fn::GetAtt" : [ "ec2Role2" , "Arn" ]}
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListRolePolicies"
      ],
      "Resource": [
	      { "Fn::GetAtt" : [ "ec2Role2" , "Arn" ]}
      ]
    },
{    
      "Effect": "Allow",
      "Action": [ "ec2:DescribeTags"],
      "Resource": ["*"]
    },
{    
      "Effect": "Allow",
      "Action": [ "ec2:DescribeInstances"],
      "Resource": ["*"]
    }
  ]
},
          "Roles" : [{"Ref" : "ec2Role2"}]
          }
          },
    "IAMInfoPolicy1" :  {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
	       "PolicyName" : "iam-info",
	        "PolicyDocument" :{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListRolePolicies"
      ],
      "Resource": [
	      { "Fn::GetAtt" : [ "ec2Role1" , "Arn" ]}
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:GetInstanceProfile",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:ListRolePolicies"
      ],
      "Resource": [
	      { "Fn::GetAtt" : [ "ec2Role1" , "Arn" ]}
      ]
    },
{    
      "Effect": "Allow",
      "Action": [ "ec2:DescribeTags"],
      "Resource": ["*"]
    },
{    
      "Effect": "Allow",
      "Action": [ "ec2:DescribeInstances"],
      "Resource": ["*"]
    }
  ]
},
          "Roles" : [{"Ref" : "ec2Role1"}]
          }
          },
    "LayerConfigPolicy2" : {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
	          "PolicyName" : "layer-config",
	          "PolicyDocument" : {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
	       { "Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3globalconfig"}, "/layer/", {"Ref" : "PublicRepo"}, "/*"]]},
	        { "Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3globalconfig"}, "/ssl/*"]]}
      ]
    },
  {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Condition": {"StringLike": {"s3:prefix": [{ "Fn::Join": [ "", ["layer/", {"Ref" : "PublicRepo"}, "/*"]]}]}
      },
      "Resource": [
        { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}]]}
      ]
    }, 
  
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Condition": {
        "StringLike": {
          "s3:prefix": "ssl/*"
        }
      },
      "Resource": [
        { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}]]}
      ]
    }
  ]
},
            "Roles" : [{"Ref" : "ec2Role2"}]
        }
      },
    "LayerConfigPolicy1" : {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
	          "PolicyName" : "layer-config",
	          "PolicyDocument" : {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
	       { "Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3globalconfig"}, "/layer/", {"Ref" : "PrivateRepo"}, "/*"]]},
	        { "Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3globalconfig"}, "/ssl/*"]]}
      ]
    },
  {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Condition": {
        "StringLike": {
          "s3:prefix": { "Fn::Join": [ "", ["layer/", {"Ref" : "PrivateRepo"}, "/*"]]}
        }
      },
      "Resource": [
        { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}]]}
      ]
    }, 
  
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Condition": {
        "StringLike": {
          "s3:prefix": "ssl/*"
        }
      },
      "Resource": [
        { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3globalconfig"}]]}
      ]
    }
  ]
},
            "Roles" : [{"Ref" : "ec2Role1"}]
        }
      },
    "MaintenanceQueuePolicy1" :  {
      "Type": "AWS::IAM::Policy",
      "Properties" : {
	          "PolicyName" : "maintenance-queue",
	          "PolicyDocument" : {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:*"
      ],
      "Resource": [
        { "Fn::GetAtt" : ["maintenanceQueue", "Arn"] }
      ]
    }
  ]
	          },
	          "Roles" : [{"Ref" : "ec2Role1"}]
           }
        },
    "S3RepoBucketPolicy1" :  { 
      "Type": "AWS::IAM::Policy",
      "Properties" : {          
	          "PolicyName" : "repo-bucket",
	          "PolicyDocument" : {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Condition": {
        "StringLike": {
          "s3:prefix": {"Fn::Join": [ "", [ {"Ref" : "PrivateRepo"},"/", {"Ref" : "Branch"}]]}
        }
      },
      "Resource": [
        { "Fn::Join": ["",["arn:aws:s3:::",{"Ref": "s3repostaging"}]]}
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:PutObject"
      ],
      "Resource": [
	    {"Fn::Join": [ "", ["arn:aws:s3:::", {"Ref": "s3repostaging"}, "/", {"Ref" : "PrivateRepo"},"/", {"Ref" : "Branch"}, "/*"]]}
      ]
    }
  ]
},
            "Roles" : [{"Ref" : "ec2Role1"}]
          }
    },
    "ec2Role1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "PrivateRepo"
              },
              "/",
              {
                "Ref": "Environment"
              },
              "/"
            ]
          ]
        }
      }
    },
    "ec2InstanceProfile1": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": {"Fn::Join": ["",["/",{"Ref": "PrivateRepo"},"/",{"Ref": "Environment"}, "/"]]        },
        "Roles": [
          {
            "Ref": "ec2Role1"
          }
        ]
      }
    },
    "ec2Role2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "PublicRepo"
              },
              "/",
              {
                "Ref": "Environment"
              },
              "/"
            ]
          ]
        }      }
    },
    "ec2InstanceProfile2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": {"Fn::Join": ["",["/",{"Ref": "PublicRepo"},"/",{"Ref": "Environment"}, "/"]]        },
        "Roles": [
          {
            "Ref": "ec2Role2"
          }
        ]
      }
    }
  },
  "Description": "PHP/Nginx Template"
}